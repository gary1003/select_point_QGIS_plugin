# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SelectPoint
                                 A QGIS plugin
 This plugin will ask user to choose database file, then the table. Prompt user to select point on the layer then saved selected.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-05-13
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Gary
        email                : b07501047@ntu.edu.tw
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QTableWidgetItem, QTableWidget
from qgis.core import QgsProject
#from qgis.utils import iface
from qgis.core import QgsDataSourceUri, QgsApplication
from qgis.gui import QgsMapCanvas
from PyQt5.QtCore import Qt

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .select_point_dialog import SelectPointDialog
import os.path


class SelectPoint:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SelectPoint_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Select Point')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SelectPoint', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/select_point/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Select Point'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Select Point'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SelectPointDialog()
            self.dlg.tabWidget.setCurrentIndex(0)
            self.dlg.pushButton.clicked.connect(self.browse)
            self.dlg.pushButton_2.clicked.connect(self.load_file)
            self.dlg.pushButton_3.clicked.connect(self.add_layer)
            self.dlg.pushButton_4.clicked.connect(self.update)
            self.dlg.pushButton_5.clicked.connect(self.export_columns)
            self.dlg.pushButton_6.clicked.connect(self.export_full)

        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass

    def browse(self):

        filename, _filter = QFileDialog.getOpenFileName(
            self.dlg, "Select import file ","", '*.sqlite')
        self.dlg.lineEdit.setText(filename)

    def load_file(self):
        from Lily.ctao2.ctao2_database_alias import manidb as database

        self.database_path = self.dlg.lineEdit.text() 
        self.mydb = database( self.database_path )
        self.tab_list  = sorted(self.mydb.tables().index.values)
        arg_num   = len(self.tab_list)
        for tab in self.tab_list:
            self.dlg.listWidget.addItem(tab)
        self.dlg.tabWidget.setCurrentIndex(1)
        #add google map as base map
        import requests
        service_url = "mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}" 
        service_uri = "type=xyz&zmin=0&zmax=21&url=https://"+requests.utils.quote(service_url)
        tms_layer = self.iface.addRasterLayer(service_uri, "Google Map", "wms")

    def add_layer(self):
        import time

        self.picked_table = self.dlg.listWidget.selectedIndexes()[0].data()
        self.iface.zoomToActiveLayer()
        #add selected table
        uri = QgsDataSourceUri()
        uri.setDatabase(self.database_path)
        schema = ''
        table = self.picked_table
        geom_column = 'geom'
        uri.setDataSource(schema, table, geom_column)
        self.layer = self.iface.addVectorLayer(uri.uri(), table,'spatialite')
        self.iface.zoomToActiveLayer()
        self.iface.actionSelect().trigger()
        self.dlg.tabWidget.setCurrentIndex(2)


    def update(self):

        self.f_list = []
        for f in self.layer.selectedFeatures():
            if hasattr(f, 'name'):
                self.f_list.append(f.attribute('name'))
            elif hasattr(f, 'full_name'):
                self.f_list.append(f.attribute('full_name'))
            else:
                self.f_list.append(f.attributes())
        
        self.dlg.tableWidget.setRowCount(len(self.f_list))
        self.dlg.tableWidget.setColumnCount(len(self.f_list[0]))
        for r, d in zip(range(len(self.f_list)), self.f_list) :
            for c in range(len(d)):
                temp = QTableWidgetItem(d[c])
                self.dlg.tableWidget.setItem(r,c,temp)
       
        self.header = []
        for field in self.layer.fields():
            self.header.append(field.name())
        self.dlg.tableWidget.setHorizontalHeaderLabels(self.header)
        self.dlg.tableWidget.horizontalHeader().setVisible(True)
        self.dlg.tableWidget.resizeColumnsToContents()
        self.dlg.tableWidget.setSelectionBehavior(QTableWidget.SelectColumns)

    def export_columns(self):
        import pandas as pd

        self.selected_columns = []
        item = self.dlg.tableWidget.selectedItems()
        for i in item:
            if self.dlg.tableWidget.indexFromItem(i).column() not in self.selected_columns:
                self.selected_columns.append(self.dlg.tableWidget.indexFromItem(i).column())
        self.columns = []
        for i in self.selected_columns:
            self.columns.append(self.header[i])
        nrow = self.dlg.tableWidget.rowCount()
        #ncol = len(self.columns)
        self.df = pd.DataFrame(columns=self.columns, index = range(nrow))
        for r, c in zip(range(nrow), self.selected_columns):
            self.df.at[r,c] = self.dlg.tableWidget.item(r, c).text()
        print(self.df.head())    


    def export_full(self):
        return


